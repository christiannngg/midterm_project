"""
Malware Detection Script

this script scans files and directories for known malware by comparing their SHA-256 hashes
against a list of known malicious hashes. The script reads malicious hashes from a text file,
calculates the hash of each file in the target directory or file, and checks for matches.

Usage:
    run the script and provide a file or directory path when prompted.
    the script will compare file hashes against the stored malware signatures.

Author: Christian Gonzalez
Date: 03/06/2025
"""

import hashlib
import os

def load_malicious_hashes(hash_file="malware_hashes.txt"):
    """
        load malicious file hashes from a text file.

        each line in the file should contain a SHA-256 hash of a known malicious file.

        Args:
            hash_file (str): the path to the file containing malicious hashes. default is 'malware_hashes.txt'.

        Returns:
            set: a set containing malicious file hashes.

        Raises:
            FileNotFoundError: if the specified hash file is not found.
    """
    try:
        with open(hash_file, 'r') as f:
            return set(line.strip() for line in f if line.strip())
    except FileNotFoundError:
        print(f"[!] Warning: {hash_file} not found!")

def calculate_hash(file_path):
    """
        Calculate the SHA-256 hash of a given file.

        Args:
            file_path (str): the path to the file whose hash is to be computed.

        Returns:
            str: the computed SHA-256 hash of the file.
            None: if an error occurs while reading the file.
    """
    try:
        with open(file_path, 'rb') as file:
            hasher = hashlib.sha256()
            while chunk := file.read(8192):
                hasher.update(chunk)
            return hasher.hexdigest()
    except FileNotFoundError:
        print(f"[!] Error: File {file_path} not found.")
        return None
    except Exception as e:
        print(f"[!] Error scanning {file_path}: {e}")
        return None

def scan_file(file_path, malicious_signatures):
    """
        Scan a file to determine if it is malicious based on its hash.

        Args:
            file_path (str): the path of the file to scan.
            malicious_signatures (set): a set of known malicious file hashes.
    """
    file_hash = calculate_hash(file_path)
    if file_hash:
        print(f"[*] Scanning: {file_path}")
        print(f"    Hash: {file_hash}")
        if file_hash in malicious_signatures:
            print(f"[!] WARNING: {file_path} is flagged as MALICIOUS!")
        else:
            print(f"[+] {file_path} is clean.")
    print("-" * 50)

def scan_directory(directory, malicious_signatures):
    """
        Scan all files in a given directory and its subdirectories.

        Args:
            directory (str): the directory path to scan.
            malicious_signatures (set): a set of known malicious file hashes.
    """
    print(f"[*] Scanning directory: {directory}\n")
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            scan_file(file_path, malicious_signatures)

def main():
    """
        main function that loads the malicious hash list and prompts the user to scan a file or directory.
    """
    malicious_signatures = load_malicious_hashes()

    # use clean/malware .txt files to scan
    target = input("Enter file or directory to scan: ").strip()
    if os.path.isdir(target):
        scan_directory(target, malicious_signatures)
    elif os.path.isfile(target):
        scan_file(target, malicious_signatures)
    else:
        print("[!] Invalid path. Please enter a valid file or directory.")


if __name__ == "__main__":
    main()
